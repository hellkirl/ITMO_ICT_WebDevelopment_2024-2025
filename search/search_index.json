{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":""},{"location":"#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043a\u0443\u0440\u0441\u0430 \"\u0412\u0435\u0431 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" - \u0418\u0422\u041c\u041e \u0418\u041a\u0422 2024/2025. \u0412\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161","text":""},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task1/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task1/#_2","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c UDP Socket, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0443\u0444\u0435\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442    \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</li> <li>\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c UDP Socket.    \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u043f\u043e\u0440\u0442\u0435 <code>8080</code> \u0438 \u043a\u043b\u0438\u0435\u043d\u0442. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.</li> </ol>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task1/#_3","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net\"\n)\n\nfunc main() {\n    udpAddr, err := net.ResolveUDPAddr(\"udp\", \":8080\")\n    if err != nil {\n        log.Fatalf(\"[client][ResolveUDPAddr]: %v\", err)\n    }\n\n    conn, err := net.DialUDP(\"udp\", nil, udpAddr)\n    if err != nil {\n        log.Fatalf(\"[client][DialUDP]: %v\", err)\n    }\n    defer conn.Close()\n\n    _, err = conn.Write([]byte(\"Hello, server\"))\n    if err != nil {\n        log.Fatalf(\"[client][Write]: %v\", err)\n    }\n\n    var buf [1024]byte\n    n, _, err := conn.ReadFromUDP(buf[0:])\n    if err != nil {\n        log.Fatalf(\"[client][ReadFromUDP]: %v\", err)\n    }\n    fmt.Println(string(buf[:n]))\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task1/#_4","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net\"\n)\n\nfunc main() {\n    udpAddr, err := net.ResolveUDPAddr(\"udp\", \":8080\")\n    if err != nil {\n        log.Fatalf(\"[server][ResolveUDPAddr]: %v\", err)\n    }\n\n    conn, err := net.ListenUDP(\"udp\", udpAddr)\n    if err != nil {\n        log.Fatalf(\"[server][ListenUDP]: %v\", err)\n    }\n    defer conn.Close()\n\n    for {\n        var buf [1024]byte\n        n, addr, err := conn.ReadFromUDP(buf[0:])\n        if err != nil {\n            log.Printf(\"[server][ReadFromUDP]: %v\", err)\n            continue\n        }\n\n        go func(message string, addr *net.UDPAddr, conn *net.UDPConn) {\n            fmt.Println(message)\n\n            if message == \"Hello, server\" {\n                _, err = conn.WriteToUDP([]byte(\"Hello, client\"), addr)\n                if err != nil {\n                    log.Printf(\"[server][WriteToUDP]: %v\", err)\n                }\n            }\n        }(string(buf[:n]), addr, conn)\n    }\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task1/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442:</p> <pre><code>go run server.go\n</code></pre> <pre><code>go run client.go\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162","text":""},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task2/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task2/#_2","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c TCP Socket, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0443\u0444\u0435\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u0438    \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d    \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0433\u043e \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</li> <li>\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c TCP Socket.    \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u043f\u043e\u0440\u0442\u0435 <code>8080</code> \u0438 \u043a\u043b\u0438\u0435\u043d\u0442. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.</li> </ol>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task2/#_3","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>package main\n\nimport (\n   \"bufio\"\n   \"fmt\"\n   \"log\"\n   \"net\"\n)\n\nfunc main() {\n   tcpAddr, err := net.ResolveTCPAddr(\"tcp\", \":8080\")\n   if err != nil {\n      log.Fatalf(\"[server][ResolveTCPAddr]: %v\", err)\n   }\n\n   listener, err := net.ListenTCP(\"tcp\", tcpAddr)\n   if err != nil {\n      log.Fatalf(\"[server][ListenTCP]: %v\", err)\n   }\n   defer listener.Close()\n\n   for {\n      conn, err := listener.Accept()\n      if err != nil {\n         log.Printf(\"[server][Accept]: %v\", err)\n         continue\n      }\n\n      go handleConnection(conn)\n   }\n}\n\nfunc handleConnection(conn net.Conn) {\n   defer conn.Close()\n\n   data, err := bufio.NewReader(conn).ReadString('\\n')\n   if err != nil {\n      log.Printf(\"[server][ReadString]: %v\", err)\n      return\n   }\n\n   result, err := handleParams(data)\n   if err != nil {\n      log.Printf(\"[server][handleParams]: %v\", err)\n      return\n   }\n\n   _, err = conn.Write([]byte(fmt.Sprintf(\"%d\", result)))\n   if err != nil {\n      log.Printf(\"[server][Write]: %v\", err)\n   }\n}\n\nfunc handleParams(params string) (uint, error) {\n   if params == \"\" {\n      return 0, fmt.Errorf(\"empty params\")\n   }\n\n   var a, b uint\n   _, err := fmt.Sscanf(params, \"%d, %d\", &amp;a, &amp;b)\n   if err != nil {\n      return 0, fmt.Errorf(\"invalid params: %v\", err)\n   }\n   fmt.Println(a, b)\n\n   return a * b, nil\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task2/#_4","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>package main\n\nimport (\n   \"flag\"\n   \"fmt\"\n   \"log\"\n   \"net\"\n)\n\nvar a, b uint\n\nfunc main() {\n   tcpAddr, err := net.ResolveTCPAddr(\"tcp\", \":8080\")\n   if err != nil {\n      log.Fatalf(\"[client][ResolveTCPAddr]: %v\", err)\n   }\n\n   conn, err := net.DialTCP(\"tcp\", nil, tcpAddr)\n   if err != nil {\n      log.Fatalf(\"[client][DialTCP]: %v\", err)\n   }\n   defer conn.Close()\n\n   _, err = conn.Write([]byte(fmt.Sprintf(\"%d, %d\\n\", a, b)))\n   if err != nil {\n      log.Fatalf(\"[client][Write]: %v\", err)\n   }\n\n   var buf [1024]byte\n   n, err := conn.Read(buf[0:])\n   if err != nil {\n      log.Fatalf(\"[client][Read]: %v\", err)\n   }\n\n   fmt.Println(string(buf[:n]))\n}\n\nfunc init() {\n   flag.UintVar(&amp;a, \"a\", 0, \"Parameter a\")\n   flag.UintVar(&amp;b, \"b\", 0, \"Parameter b\")\n   flag.Parse()\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task2/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442:</p> <pre><code>go run server.go\n</code></pre> <pre><code>go run client.go -a=positive_number -b=positive_number\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163","text":""},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task3/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task3/#_2","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>net/http</code>. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043d\u0435\u0433\u043e. \u041d\u0430 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 <code>/</code> \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d    \u043e\u0442\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</li> <li>\u0421 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043e\u043d \u043e\u0442\u0434\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</li> </ol>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task3/#_3","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>package main\n\nimport (\n    \"html/template\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nvar tmpl *template.Template\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", handleHomePage)\n\n    err := http.ListenAndServe(\":8080\", mux)\n    if err != nil {\n        log.Fatalf(\"Failed to start server\")\n    }\n}\n\nfunc init() {\n    cwd, err := os.Getwd()\n    if err != nil {\n        log.Fatalf(\"Failed to get current working directory: %v\", err)\n    }\n\n    tmplPath := filepath.Join(cwd, \"students\", \"k3342\", \"Privalov_Kirill\", \"lr1\", \"3\", \"static\", \"index.html\")\n    tmpl, err = template.ParseFiles(tmplPath)\n    if err != nil {\n        log.Fatalf(\"[server][ParseFiles]: %v\", err)\n    }\n}\n\nfunc handleHomePage(w http.ResponseWriter, r *http.Request) {\n    err := tmpl.Execute(w, nil)\n    if err != nil {\n        log.Fatalf(\"Failed to parse index.html\")\n    }\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task3/#_4","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"http://localhost:8080\")\n    if err != nil {\n        log.Fatalf(\"Failed to create a request: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    fmt.Printf(\"%s %s\\n\", resp.Proto, resp.Status)\n\n    for key, values := range resp.Header {\n        for _, value := range values {\n            fmt.Printf(\"%s: %s\\n\", key, value)\n        }\n    }\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        log.Fatalf(\"Failed to read response body: %v\", err)\n    }\n    fmt.Println(string(body))\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task3/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442:</p> <pre><code>go run server.go\n</code></pre> <pre><code>go run client.go\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164","text":""},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task4/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task4/#_2","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f TCP socket. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430    \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</li> <li>\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f TCP socket. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439,    \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> </ol>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task4/#_3","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"math/rand\"\n    \"net\"\n    \"strings\"\n    \"sync\"\n    \"time\"\n)\n\ntype Client struct {\n    Name   string\n    Color  string\n    Conn   net.Conn\n    Reader *bufio.Reader\n}\n\nvar (\n    clients   = make(map[string]Client)\n    clientsMu sync.Mutex\n    colors    = []string{\n        \"\\033[31m\", // Red\n        \"\\033[32m\", // Green\n        \"\\033[33m\", // Yellow\n        \"\\033[34m\", // Blue\n        \"\\033[35m\", // Magenta\n        \"\\033[36m\", // Cyan\n    }\n    resetColor = \"\\033[0m\"\n)\n\nfunc isNameTaken(name string) bool {\n    clientsMu.Lock()\n    defer clientsMu.Unlock()\n\n    _, exists := clients[name]\n    return exists\n}\n\nfunc broadcastMessage(senderName, senderColor, message string) {\n    clientsMu.Lock()\n    defer clientsMu.Unlock()\n\n    for _, client := range clients {\n        if client.Name != senderName {\n            client.Conn.Write([]byte(senderColor + senderName + \": \" + message + resetColor + \"\\n\"))\n        }\n    }\n}\n\nfunc handleConnection(conn net.Conn) {\n    defer conn.Close()\n\n    reader := bufio.NewReader(conn)\n    var name string\n\n    for {\n        nameInput, _ := reader.ReadString('\\n')\n        name = strings.TrimSpace(nameInput)\n\n        if name == \"\" {\n            conn.Write([]byte(\"Name cannot be empty. Try again.\\n\"))\n            continue\n        }\n\n        if isNameTaken(name) {\n            conn.Write([]byte(\"Name is already taken. Choose a different name.\\n\"))\n        } else {\n            break\n        }\n    }\n\n    clientColor := colors[rand.Intn(len(colors))]\n\n    client := Client{\n        Name:   name,\n        Color:  clientColor,\n        Conn:   conn,\n        Reader: reader,\n    }\n\n    clientsMu.Lock()\n    clients[name] = client\n    clientsMu.Unlock()\n\n    fmt.Printf(\"%s has joined the chat\\n\", name)\n\n    conn.Write([]byte(\"Welcome to the chat, \" + name + \"!\\n\"))\n    broadcastMessage(\"Server\", \"\", name+\" has joined the chat!\")\n\n    for {\n        message, err := reader.ReadString('\\n')\n        if err != nil {\n            break\n        }\n        message = strings.TrimSpace(message)\n\n        if message != \"\" {\n            broadcastMessage(name, client.Color, message)\n        }\n    }\n\n    clientsMu.Lock()\n    delete(clients, name)\n    clientsMu.Unlock()\n\n    broadcastMessage(\"Server\", \"\", name+\" has left the chat\")\n    fmt.Printf(\"%s has left the chat\\n\", name)\n}\n\nfunc main() {\n    rand.NewSource(time.Now().UnixNano())\n    listener, err := net.Listen(\"tcp\", \":8080\")\n    if err != nil {\n        fmt.Println(\"Error starting server:\", err)\n        return\n    }\n    defer listener.Close()\n\n    fmt.Println(\"Chat server started on port 8080\")\n\n    for {\n        conn, err := listener.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting connection:\", err)\n            continue\n        }\n        go handleConnection(conn)\n    }\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task4/#_4","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strings\"\n)\n\nfunc init() {\n    fmt.Println(\"Enter your name.\")\n}\n\nfunc main() {\n    conn, err := net.Dial(\"tcp\", \"localhost:8080\")\n    if err != nil {\n        fmt.Println(\"Error connecting to server:\", err)\n        return\n    }\n    defer conn.Close()\n\n    go func() {\n        reader := bufio.NewReader(conn)\n        for {\n            message, err := reader.ReadString('\\n')\n            if err != nil {\n                fmt.Println(\"Disconnected from server\")\n                return\n            }\n            fmt.Print(message)\n        }\n    }()\n\n    writer := bufio.NewWriter(conn)\n    scanner := bufio.NewScanner(os.Stdin)\n\n    for scanner.Scan() {\n        message := scanner.Text()\n        message = strings.TrimSpace(message)\n        if message != \"\" {\n            writer.WriteString(message + \"\\n\")\n            writer.Flush()\n        }\n    }\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task4/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0432\u0432\u0435\u0434\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</p> <pre><code>go run server.go\n</code></pre> <pre><code>go run client.go\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165","text":""},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task5/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d:</p> <ul> <li>\u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.</li> <li>\u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</li> </ul>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task5/#_2","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c <code>net/http</code>. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0434\u0432\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430, \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e    \u043d\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0435, \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438.</li> <li>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>Grade</code> \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0435.</li> <li>\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0443\u0449\u0435\u0441\u0432\u0443\u044e\u0449\u0438\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432. \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c <code>html/template</code> \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</li> </ol>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task5/#_3","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>package main\n\nimport (\n   \"encoding/json\"\n   \"html/template\"\n   \"log\"\n   \"net/http\"\n   \"sync\"\n)\n\ntype Grade struct {\n   Subject string `json:\"subject\"`\n   Grade   int    `json:\"grade,omitempty\"`\n}\n\nvar (\n   gradesMap = make(map[string][]Grade)\n   mu        sync.Mutex\n)\n\nfunc main() {\n   mux := setUpMux()\n\n   err := run(mux)\n   if err != nil {\n      log.Fatalf(\"Failed to start server: %v\", err)\n   }\n}\n\nfunc run(mux *http.ServeMux) error {\n   return http.ListenAndServe(\":8080\", mux)\n}\n\nfunc setUpMux() *http.ServeMux {\n   mux := http.NewServeMux()\n   mux.HandleFunc(\"/\", handleHomePage)\n   mux.HandleFunc(\"/new-grade\", handleNewGrade)\n   return mux\n}\n\nfunc handleHomePage(w http.ResponseWriter, r *http.Request) {\n   mu.Lock()\n   defer mu.Unlock()\n\n   tmpl := `\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Grades&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;All Grades&lt;/h1&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Subject&lt;/th&gt;\n            &lt;th&gt;Grades&lt;/th&gt;\n        &lt;/tr&gt;\n        {{range $subject, $grades := .}}\n        &lt;tr&gt;\n            &lt;td&gt;{{$subject}}&lt;/td&gt;\n            &lt;td&gt;\n                {{range $grades}}\n                    {{.Grade}} \n                {{end}}\n            &lt;/td&gt;\n        &lt;/tr&gt;\n        {{else}}\n        &lt;tr&gt;\n            &lt;td colspan=\"2\"&gt;No grades available&lt;/td&gt;\n        &lt;/tr&gt;\n        {{end}}\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n`\n   t := template.Must(template.New(\"grades\").Parse(tmpl))\n   if err := t.Execute(w, gradesMap); err != nil {\n      http.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n   }\n}\n\nfunc handleNewGrade(w http.ResponseWriter, r *http.Request) {\n   if r.Method != http.MethodPost {\n      http.Error(w, \"Method is not allowed\", http.StatusMethodNotAllowed)\n      return\n   }\n\n   var newGrade Grade\n   decoder := json.NewDecoder(r.Body)\n   if err := decoder.Decode(&amp;newGrade); err != nil {\n      http.Error(w, \"Invalid JSON\", http.StatusBadRequest)\n      return\n   }\n   defer r.Body.Close()\n\n   if newGrade.Subject == \"\" || newGrade.Grade &lt; 0 || newGrade.Grade &gt; 5 {\n      http.Error(w, \"Invalid grade data\", http.StatusBadRequest)\n      return\n   }\n\n   mu.Lock()\n   gradesMap[newGrade.Subject] = append(gradesMap[newGrade.Subject], newGrade)\n   mu.Unlock()\n\n   w.WriteHeader(http.StatusNoContent)\n}\n</code></pre>"},{"location":"%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D0%B5%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%961/task5/#_4","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<pre><code>go run server.go\n</code></pre>"}]}